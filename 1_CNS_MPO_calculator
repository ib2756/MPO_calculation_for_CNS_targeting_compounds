# ==========================================================================================
# Script: MPO Score Calculator with Flat-Top Gaussian Desirability and Docking Normalization
#
# DESCRIPTION:
# This script evaluates drug-likeness of ligands for CNS-targeted molecules using a
# Multi-Parameter Optimization (MPO) scheme. It calculates desirability scores based on
# property ranges and ranks compounds accordingly.
#
# INPUT:
# - Use the CSV file generated by the `0_SDF_to_CSV_converter` script.
# - Required columns: Title, docking score, donorHB, accptHB, mol MW,
#   glide rotatable bonds, TPSA, QPlogPo/w, CNS, QPlogBB
#
# SCORING LOGIC:
# 1. **Flat-top Gaussian Desirability Functions**:
#    - Properties within ideal ranges receive full desirability (score = 1.0).
#    - Scores smoothly decay outside the range using Gaussian-like curves.
#    - Properties beyond cutoffs (`low` or `high`) receive 0.
#    - Final MPO_score is a weighted average of all desirabilities.
#
# 2. **Docking Score Normalization**:
#    - Glide docking scores are normalized to [0, 1]:
#        - Most negative score → 1.0 (best)
#        - Least negative score → 0.0 (worst)
#    - Stored in the `norm_docking_score` column.
#
# COLUMN ORGANIZATION:
# - If the 'Title' column is present:
#     - MPO and normalized docking scores are inserted directly after it.
# - If not, these scores are appended to the end.
#
# OUTPUT:
# - A CSV file saved in the same directory as the input:
#     - Sorted by MPO_score (highest to lowest).
#     - Contains all original columns + MPO_score + norm_docking_score.
#
# TERMINAL OUTPUT:
# - Confirmation of successful output save.
# - Warnings if essential columns are missing.
#
# VISUALIZATION (Histogram):
# - Two histograms are generated after scoring:
#
#   1. **MPO Score Distribution**:
#      - Histogram of all MPO scores.
#      - Red dashed line marks MPO = 0.4.
#      - Subtitle indicates the % of compounds scoring below 0.4.
#
#   2. **Docking Score Distribution**:
#      - Histogram of Glide docking scores.
#      - Embedded table shows:
#          - Best (lowest) docking score
#          - Worst (highest) docking score
#          - Delta (range)
#
# ==========================================================================================


import pandas as pd
import numpy as np
import os

# Flat-top Gaussian-like desirability function
def flat_top_gaussian(x, low, ideal_low, ideal_high, high):
    if pd.isna(x):
        return np.nan
    if ideal_low <= x <= ideal_high:
        return 1.0
    elif x < low or x > high:
        return 0.0
    elif x < ideal_low:
        return np.exp(-((x - ideal_low) ** 2) / (2 * ((ideal_low - low) / 2) ** 2))
    else:  # x > ideal_high
        return np.exp(-((x - ideal_high) ** 2) / (2 * ((high - ideal_high) / 2) ** 2))

# Ask user for CSV input file path
input_path = input("Enter the full path to your CSV file: ").strip().replace("\\", "/").strip('"')

# Load the dataset
df = pd.read_csv(input_path)

# Define thresholds and weights
thresholds = {
    'donorHB':              {'low': 0,   'ideal_low': 1,   'ideal_high': 2,   'high': 3,   'weight': 5},
    'accptHB':           {'low': 0,   'ideal_low': 1,   'ideal_high': 3,   'high': 7,   'weight': 5},
    'mol MW':                  {'low': 100,   'ideal_low': 150, 'ideal_high': 400, 'high': 450, 'weight': 5},
    'glide rotatable bonds':   {'low': 0,   'ideal_low': 1,   'ideal_high': 3,   'high': 8,   'weight': 5},
    'TPSA':                    {'low': 20,  'ideal_low': 40,  'ideal_high': 60,  'high': 90,  'weight': 5},
    'QPlogPo/w':               {'low': 1,   'ideal_low': 2,   'ideal_high': 3,   'high': 4,   'weight': 5},
    'CNS':                     {'low': 0,   'ideal_low': 1,   'ideal_high': 2,   'high': 3,   'weight': 5},
    'QPlogBB':                 {'low': -1,  'ideal_low': 0,   'ideal_high': 1.2, 'high': 1.5, 'weight': 5}
}

# Calculate desirability scores
desirability_scores = []
weights = []
score_cols = []

for prop, params in thresholds.items():
    low = params['low']
    ideal_low = params['ideal_low']
    ideal_high = params['ideal_high']
    high = params['high']
    weight = params['weight']
    weights.append(weight)

    score_col = f'd_{prop}'
    df[score_col] = df[prop].apply(lambda x: flat_top_gaussian(x, low, ideal_low, ideal_high, high))
    score_cols.append(score_col)
    desirability_scores.append(df[score_col] * weight)

# Calculate MPO score
df['MPO_score'] = sum(desirability_scores) / sum(weights)

# Normalize docking score: lower (more negative) is better
if 'docking score' in df.columns:
    best = df['docking score'].min()   # most negative
    worst = df['docking score'].max()  # least negative
    range_dock = worst - best if worst != best else 1  # avoid div by 0
    df['norm_docking_score'] = (worst - df['docking score']) / range_dock
else:
    print("Warning: 'Docking Score' column not found. Skipping docking normalization.")

# Move MPO_score and norm_docking_score after Title
if 'Title' in df.columns:
    cols = df.columns.tolist()
    cols.remove('MPO_score')
    if 'norm_docking_score' in cols:
        cols.remove('norm_docking_score')
    insert_index = cols.index('Title') + 1
    cols.insert(insert_index, 'MPO_score')
    if 'norm_docking_score' in df.columns:
        cols.insert(insert_index + 1, 'norm_docking_score')
    df = df[cols]
else:
    print("Warning: 'Title' column not found; scores remain at the end.")

# Sort by MPO_score
df_sorted = df.sort_values(by='MPO_score', ascending=False)

# Ask user for output filename
output_name = input("Enter output filename (without extension): ").strip()
if not output_name:
    output_name = "MPO_scored_output"

# Save to the same directory as input
output_dir = os.path.dirname(input_path)
output_path = os.path.join(output_dir, f"{output_name}.csv")

df_sorted.to_csv(output_path, index=False)
print(f"Scored and saved to '{output_path}'")

# Optional Visualization: Histogram of MPO Score and Docking Score
import matplotlib.pyplot as plt

# Load the newly saved CSV
df_out = pd.read_csv(output_path)

# MPO Score Histogram with annotation for < 0.4
# Calculate percentage below 0.4
valid_scores = df_out['MPO_score'].dropna()
below_threshold = (valid_scores < 0.4).sum()
total = len(valid_scores)
percent_below = (below_threshold / total) * 100

# Plot MPO histogram
plt.figure(figsize=(8, 5))
plt.hist(valid_scores, bins=20, color='skyblue', edgecolor='black')
plt.axvline(0.4, color='red', linestyle='--', linewidth=1.5, label='MPO = 0.4')
plt.title(f'Distribution of MPO Scores\n({percent_below:.1f}% scored below 0.4)')
plt.xlabel('MPO Score')
plt.ylabel('Frequency')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()

# Docking Score Histogram with summary table
from matplotlib.table import Table

# Ensure 'docking score' column exists and is numeric
if 'docking score' in df_out.columns:
    docking_scores = pd.to_numeric(df_out['docking score'], errors='coerce').dropna()
    best_dock = docking_scores.min()
    worst_dock = docking_scores.max()
    delta_dock = worst_dock - best_dock

    # Plot histogram
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.hist(docking_scores, bins=20, color='lightcoral', edgecolor='black')
    ax.set_title('Distribution of Docking Scores')
    ax.set_xlabel('Docking Score')
    ax.set_ylabel('Frequency')
    ax.grid(axis='y', linestyle='--', alpha=0.7)

    # Create inset table
    table_data = [
        ["Best (lowest)", f"{best_dock:.2f}"],
        ["Worst (highest)", f"{worst_dock:.2f}"],
        ["Δ (Range)", f"{delta_dock:.2f}"]
    ]
    table = plt.table(cellText=table_data,
                      colWidths=[0.3, 0.2],
                      colLabels=["Metric", "Value"],
                      cellLoc='center',
                      loc='upper right',
                      bbox=[0.65, 0.7, 0.3, 0.2])  # [left, bottom, width, height]
    table.auto_set_font_size(False)
    table.set_fontsize(10)

    plt.tight_layout()
    plt.show()
else:
    print("⚠️ Warning: 'docking score' column not found or empty.")
